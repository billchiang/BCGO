package com.example.emailassembly;

import jakarta.activation.DataHandler;
import jakarta.activation.DataSource;
import jakarta.activation.FileDataSource;
import jakarta.mail.Message;
import jakarta.mail.Multipart;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeBodyPart;
import jakarta.mail.internet.MimeMessage;
import jakarta.mail.internet.MimeMultipart;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.stream.Collectors;

public class EmailAssembler {

    public MimeMessage assembleEmail(String toAddress, String subject, 
                                     String customerName, String statementDate, 
                                     String pdfAttachmentPath) throws Exception {
        Properties props = new Properties();
        Session session = Session.getDefaultInstance(props, null);
        MimeMessage message = new MimeMessage(session);

        message.setFrom(new InternetAddress("noreply@example.com"));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toAddress));
        message.setSubject(subject);

        // 1. HTML Body Part
        MimeBodyPart htmlBodyPart = new MimeBodyPart();
        String htmlTemplate = loadHtmlTemplate("email_template.html");
        String htmlContent = htmlTemplate.replace("{{customer_name}}", customerName)
                                         .replace("{{statement_date}}", statementDate);
        htmlBodyPart.setContent(htmlContent, "text/html; charset=utf-8");

        // 2. PDF Attachment Part
        MimeBodyPart pdfAttachmentPart = new MimeBodyPart();
        File pdfFile = new File(pdfAttachmentPath);
        if (!pdfFile.exists()) {
            throw new RuntimeException("PDF attachment not found at: " + pdfAttachmentPath);
        }
        DataSource source = new FileDataSource(pdfFile);
        pdfAttachmentPart.setDataHandler(new DataHandler(source));
        pdfAttachmentPart.setFileName(Paths.get(pdfAttachmentPath).getFileName().toString());
        pdfAttachmentPart.setHeader("Content-Type", "application/pdf");


        // 3. Combine parts into Multipart
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(htmlBodyPart);
        multipart.addBodyPart(pdfAttachmentPart);

        message.setContent(multipart);
        return message;
    }

    private String loadHtmlTemplate(String templateName) throws Exception {
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(templateName);
        if (inputStream == null) {
            throw new RuntimeException("Cannot find template: " + templateName);
        }
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        }
    }

    public static void main(String[] args) {
        try {
            EmailAssembler assembler = new EmailAssembler();
            // Define a relative path to the PDF generated by the AFPConversionModule
            // This assumes the EmailAssemblyModule is at the same level as AFPConversionModule
            // inside CreditCard_E-statement
            String pdfPath = "../AFP_Conversion_Module_Design/output/statement.pdf"; 
            
            // Check if dummy PDF exists, if not, create one for testing this module standalone
            File pdfFile = new File(pdfPath);
            if (!pdfFile.exists()) {
                System.out.println("Dummy PDF not found at " + pdfFile.getAbsolutePath() + ", creating one for test.");
                // Ensure parent directories exist
                File parentDir = pdfFile.getParentFile();
                if (parentDir != null && !parentDir.exists()) {
                    parentDir.mkdirs();
                }
                // Create an empty file, or with minimal content if needed for some parsers
                try (FileOutputStream fos = new FileOutputStream(pdfFile)) {
                     fos.write("%%PDF-1.4\n%dummy content".getBytes(StandardCharsets.UTF_8)); // Minimal PDF-like content
                }
                System.out.println("Created dummy PDF: " + pdfFile.getAbsolutePath());
            }


            MimeMessage assembledMessage = assembler.assembleEmail(
                    "testrecipient@example.com", 
                    "Your Monthly Statement", 
                    "Jane Doe", 
                    "2024-07-28", 
                    pdfPath
            );

            File outputFile = new File("output/assembled_email.eml");
            outputFile.getParentFile().mkdirs(); // Ensure output directory exists
            try (FileOutputStream fos = new FileOutputStream(outputFile)) {
                assembledMessage.writeTo(fos);
            }
            System.out.println("Email assembled successfully and saved to " + outputFile.getAbsolutePath());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
